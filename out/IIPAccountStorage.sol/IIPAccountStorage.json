{"abi":[{"type":"function","name":"getBytes","inputs":[{"name":"key","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"bytes","internalType":"bytes"}],"stateMutability":"view"},{"type":"function","name":"getBytes","inputs":[{"name":"namespace","type":"bytes32","internalType":"bytes32"},{"name":"key","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"bytes","internalType":"bytes"}],"stateMutability":"view"},{"type":"function","name":"getBytes32","inputs":[{"name":"namespace","type":"bytes32","internalType":"bytes32"},{"name":"key","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"getBytes32","inputs":[{"name":"key","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"getBytes32Batch","inputs":[{"name":"namespaces","type":"bytes32[]","internalType":"bytes32[]"},{"name":"keys","type":"bytes32[]","internalType":"bytes32[]"}],"outputs":[{"name":"values","type":"bytes32[]","internalType":"bytes32[]"}],"stateMutability":"view"},{"type":"function","name":"getBytesBatch","inputs":[{"name":"namespaces","type":"bytes32[]","internalType":"bytes32[]"},{"name":"keys","type":"bytes32[]","internalType":"bytes32[]"}],"outputs":[{"name":"values","type":"bytes[]","internalType":"bytes[]"}],"stateMutability":"view"},{"type":"function","name":"setBytes","inputs":[{"name":"key","type":"bytes32","internalType":"bytes32"},{"name":"value","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setBytes32","inputs":[{"name":"key","type":"bytes32","internalType":"bytes32"},{"name":"value","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setBytes32Batch","inputs":[{"name":"keys","type":"bytes32[]","internalType":"bytes32[]"},{"name":"values","type":"bytes32[]","internalType":"bytes32[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setBytesBatch","inputs":[{"name":"keys","type":"bytes32[]","internalType":"bytes32[]"},{"name":"values","type":"bytes[]","internalType":"bytes[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"supportsInterface","inputs":[{"name":"interfaceId","type":"bytes4","internalType":"bytes4"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"getBytes(bytes32)":"c031a180","getBytes(bytes32,bytes32)":"c7750f29","getBytes32(bytes32)":"a6ed563e","getBytes32(bytes32,bytes32)":"37d9d7fc","getBytes32Batch(bytes32[],bytes32[])":"decd4201","getBytesBatch(bytes32[],bytes32[])":"90e2f939","setBytes(bytes32,bytes)":"2e28d084","setBytes32(bytes32,bytes32)":"4e91db08","setBytes32Batch(bytes32[],bytes32[])":"8acce2c2","setBytesBatch(bytes32[],bytes[])":"b1e2a194","supportsInterface(bytes4)":"01ffc9a7"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"namespace\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"getBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"namespaces\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"keys\",\"type\":\"bytes32[]\"}],\"name\":\"getBytes32Batch\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"values\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"namespaces\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"keys\",\"type\":\"bytes32[]\"}],\"name\":\"getBytesBatch\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"values\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"setBytes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"name\":\"setBytes32\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"keys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"values\",\"type\":\"bytes32[]\"}],\"name\":\"setBytes32Batch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"keys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"values\",\"type\":\"bytes[]\"}],\"name\":\"setBytesBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Provides a structured way to store IPAccount's state using a namespaced storage pattern. This interface facilitates conflict-free data writing by different Modules into the same IPAccount by utilizing namespaces. The default namespace for write operations is determined by the `msg.sender`, ensuring that only the owning Module (i.e., the Module calling the write functions) can write data into its respective namespace. However, read operations are unrestricted and can access any namespace. Rules: - The default namespace for a Module is its own address. - Every Module can read data from any namespace. - Only the owning Module (i.e., the Module whose address is used as the namespace) can write data into   its respective namespace.\",\"kind\":\"dev\",\"methods\":{\"getBytes(bytes32)\":{\"details\":\"Retrieves a bytes value by a given key from the default namespace.\",\"params\":{\"key\":\"The key whose value is to be retrieved.\"},\"returns\":{\"_0\":\"The bytes value stored under the specified key.\"}},\"getBytes(bytes32,bytes32)\":{\"details\":\"Retrieves a bytes value by a given key from a specified namespace.\",\"params\":{\"key\":\"The key whose value is to be retrieved.\",\"namespace\":\"The namespace from which to retrieve the value.\"},\"returns\":{\"_0\":\"The bytes value stored under the specified key in the given namespace.\"}},\"getBytes32(bytes32)\":{\"details\":\"Retrieves a bytes32 value by a given key from the default namespace.\",\"params\":{\"key\":\"The key whose value is to be retrieved.\"},\"returns\":{\"_0\":\"The bytes32 value stored under the specified key.\"}},\"getBytes32(bytes32,bytes32)\":{\"details\":\"Retrieves a bytes32 value by a given key from a specified namespace.\",\"params\":{\"key\":\"The key whose value is to be retrieved.\",\"namespace\":\"The namespace from which to retrieve the value.\"},\"returns\":{\"_0\":\"The bytes32 value stored under the specified key in the given namespace.\"}},\"getBytes32Batch(bytes32[],bytes32[])\":{\"details\":\"The `namespaces` and `keys` arrays must be the same length.\",\"params\":{\"keys\":\"An array of `bytes32` keys for which values are to be retrieved.\",\"namespaces\":\"An array of `bytes32` representing the namespaces from which to retrieve the values.\"},\"returns\":{\"values\":\"An array of `bytes32` values retrieved from the specified keys within the given namespaces.\"}},\"getBytesBatch(bytes32[],bytes32[])\":{\"details\":\"Requires that the length of `namespaces` and `keys` arrays be the same to ensure correct data retrieval.\",\"params\":{\"keys\":\"An array of `bytes32` representing the keys corresponding to the values to be retrieved.\",\"namespaces\":\"An array of `bytes32` representing the namespaces from which values are to be retrieved.\"},\"returns\":{\"values\":\"An array of `bytes` containing the values associated with the specified keys across the given namespaces.\"}},\"setBytes(bytes32,bytes)\":{\"details\":\"Sets a bytes value under a given key within the default namespace, determined by `msg.sender`.\",\"params\":{\"key\":\"The key under which to store the value.\",\"value\":\"The bytes value to be stored.\"}},\"setBytes32(bytes32,bytes32)\":{\"details\":\"Sets a bytes32 value under a given key within the default namespace, determined by `msg.sender`.\",\"params\":{\"key\":\"The key under which to store the value.\",\"value\":\"The bytes32 value to be stored.\"}},\"setBytes32Batch(bytes32[],bytes32[])\":{\"details\":\"The function requires that the `keys` and `values` arrays have the same length for correct mapping.\",\"params\":{\"keys\":\"An array of `bytes32` keys under which the values will be stored.\",\"values\":\"An array of `bytes32` values to be stored under the specified keys.\"}},\"setBytesBatch(bytes32[],bytes[])\":{\"details\":\"The function requires that the arrays `keys` and `values` have the same length.\",\"params\":{\"keys\":\"An array of `bytes32` keys under which the `bytes` values will be stored.\",\"values\":\"An array of `bytes` values corresponding to the keys to be stored.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"title\":\"IPAccount Namespaced Storage Interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getBytes32Batch(bytes32[],bytes32[])\":{\"notice\":\"Retrieves an array of `bytes32` values corresponding to specified keys across multiple namespaces.\"},\"getBytesBatch(bytes32[],bytes32[])\":{\"notice\":\"Retrieves an array of `bytes` values corresponding to an array of keys from specified namespaces.\"},\"setBytes32Batch(bytes32[],bytes32[])\":{\"notice\":\"Sets an array of `bytes32` values for corresponding keys within the caller's (`msg.sender`) namespace.\"},\"setBytesBatch(bytes32[],bytes[])\":{\"notice\":\"Sets multiple `bytes` values for an array of keys within the namespace of the caller (`msg.sender`).\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@story-protocol/protocol-core/contracts/interfaces/IIPAccountStorage.sol\":\"IIPAccountStorage\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[\":@chainlink/=node_modules/@chainlink/\",\":@create3-deployer/=node_modules/@story-protocol/create3-deployer/\",\":@eth-optimism/=node_modules/@eth-optimism/\",\":@openzeppelin-foundry-upgrades/=lib/protocol-periphery-v1/lib/openzeppelin-foundry-upgrades/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":@protocol-periphery-v1/=lib/protocol-periphery-v1/\",\":@scroll-tech/=node_modules/@scroll-tech/\",\":@solady/=node_modules/solady/\",\":@story-protocol/=node_modules/@story-protocol/\",\":@storyprotocol/core/=node_modules/@story-protocol/protocol-core/contracts/\",\":@storyprotocol/periphery/=node_modules/@story-protocol/protocol-periphery/contracts/\",\":@storyprotocol/script/=node_modules/@story-protocol/protocol-core/script/foundry/\",\":@storyprotocol/test/=node_modules/@story-protocol/protocol-core/test/foundry/\",\":@uniswap/=node_modules/@uniswap/\",\":base64-sol/=node_modules/base64-sol/\",\":ds-test/=node_modules/ds-test/src/\",\":erc6551/=node_modules/erc6551/\",\":forge-std/=node_modules/forge-std/src/\",\":hardhat-deploy/=node_modules/hardhat-deploy/\",\":hardhat-diamond-abi/=node_modules/hardhat-diamond-abi/\",\":hardhat/=node_modules/hardhat/\",\":openzeppelin-foundry-upgrades/=lib/protocol-periphery-v1/lib/openzeppelin-foundry-upgrades/src/\",\":protocol-periphery-v1/=lib/protocol-periphery-v1/\",\":solady/=node_modules/solady/\",\":solidity-code-metrics/=node_modules/solidity-code-metrics/\",\":solidity-stringutils/=lib/protocol-periphery-v1/lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/\",\":solmate/=node_modules/solmate/\"]},\"sources\":{\"node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8084aa71a4cc7d2980972412a88fe4f114869faea3fefa5436431644eb5c0287\",\"dweb:/ipfs/Qmbqfs5dRdPvHVKY8kTaeyc65NdqXRQwRK7h9s5UJEhD1p\"]},\"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]},\"node_modules/@story-protocol/protocol-core/contracts/interfaces/IIPAccountStorage.sol\":{\"keccak256\":\"0x660f3c2741daddb8afaa681816f637521acb02432dd71aa26b64380a3a2183f0\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://fc0554d596b99ddb3124157db5bde166859238dfc1407c12602f7ed59ce04d7a\",\"dweb:/ipfs/QmPFCSfGvD2dRA72qfpYYV8xyPwwNteSuijSJv5tVFHuFe\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.26+commit.8a97fa7a"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"bytes32","name":"key","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getBytes","outputs":[{"internalType":"bytes","name":"","type":"bytes"}]},{"inputs":[{"internalType":"bytes32","name":"namespace","type":"bytes32"},{"internalType":"bytes32","name":"key","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getBytes","outputs":[{"internalType":"bytes","name":"","type":"bytes"}]},{"inputs":[{"internalType":"bytes32","name":"namespace","type":"bytes32"},{"internalType":"bytes32","name":"key","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getBytes32","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"bytes32","name":"key","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getBytes32","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"bytes32[]","name":"namespaces","type":"bytes32[]"},{"internalType":"bytes32[]","name":"keys","type":"bytes32[]"}],"stateMutability":"view","type":"function","name":"getBytes32Batch","outputs":[{"internalType":"bytes32[]","name":"values","type":"bytes32[]"}]},{"inputs":[{"internalType":"bytes32[]","name":"namespaces","type":"bytes32[]"},{"internalType":"bytes32[]","name":"keys","type":"bytes32[]"}],"stateMutability":"view","type":"function","name":"getBytesBatch","outputs":[{"internalType":"bytes[]","name":"values","type":"bytes[]"}]},{"inputs":[{"internalType":"bytes32","name":"key","type":"bytes32"},{"internalType":"bytes","name":"value","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"setBytes"},{"inputs":[{"internalType":"bytes32","name":"key","type":"bytes32"},{"internalType":"bytes32","name":"value","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"setBytes32"},{"inputs":[{"internalType":"bytes32[]","name":"keys","type":"bytes32[]"},{"internalType":"bytes32[]","name":"values","type":"bytes32[]"}],"stateMutability":"nonpayable","type":"function","name":"setBytes32Batch"},{"inputs":[{"internalType":"bytes32[]","name":"keys","type":"bytes32[]"},{"internalType":"bytes[]","name":"values","type":"bytes[]"}],"stateMutability":"nonpayable","type":"function","name":"setBytesBatch"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"stateMutability":"view","type":"function","name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}]}],"devdoc":{"kind":"dev","methods":{"getBytes(bytes32)":{"details":"Retrieves a bytes value by a given key from the default namespace.","params":{"key":"The key whose value is to be retrieved."},"returns":{"_0":"The bytes value stored under the specified key."}},"getBytes(bytes32,bytes32)":{"details":"Retrieves a bytes value by a given key from a specified namespace.","params":{"key":"The key whose value is to be retrieved.","namespace":"The namespace from which to retrieve the value."},"returns":{"_0":"The bytes value stored under the specified key in the given namespace."}},"getBytes32(bytes32)":{"details":"Retrieves a bytes32 value by a given key from the default namespace.","params":{"key":"The key whose value is to be retrieved."},"returns":{"_0":"The bytes32 value stored under the specified key."}},"getBytes32(bytes32,bytes32)":{"details":"Retrieves a bytes32 value by a given key from a specified namespace.","params":{"key":"The key whose value is to be retrieved.","namespace":"The namespace from which to retrieve the value."},"returns":{"_0":"The bytes32 value stored under the specified key in the given namespace."}},"getBytes32Batch(bytes32[],bytes32[])":{"details":"The `namespaces` and `keys` arrays must be the same length.","params":{"keys":"An array of `bytes32` keys for which values are to be retrieved.","namespaces":"An array of `bytes32` representing the namespaces from which to retrieve the values."},"returns":{"values":"An array of `bytes32` values retrieved from the specified keys within the given namespaces."}},"getBytesBatch(bytes32[],bytes32[])":{"details":"Requires that the length of `namespaces` and `keys` arrays be the same to ensure correct data retrieval.","params":{"keys":"An array of `bytes32` representing the keys corresponding to the values to be retrieved.","namespaces":"An array of `bytes32` representing the namespaces from which values are to be retrieved."},"returns":{"values":"An array of `bytes` containing the values associated with the specified keys across the given namespaces."}},"setBytes(bytes32,bytes)":{"details":"Sets a bytes value under a given key within the default namespace, determined by `msg.sender`.","params":{"key":"The key under which to store the value.","value":"The bytes value to be stored."}},"setBytes32(bytes32,bytes32)":{"details":"Sets a bytes32 value under a given key within the default namespace, determined by `msg.sender`.","params":{"key":"The key under which to store the value.","value":"The bytes32 value to be stored."}},"setBytes32Batch(bytes32[],bytes32[])":{"details":"The function requires that the `keys` and `values` arrays have the same length for correct mapping.","params":{"keys":"An array of `bytes32` keys under which the values will be stored.","values":"An array of `bytes32` values to be stored under the specified keys."}},"setBytesBatch(bytes32[],bytes[])":{"details":"The function requires that the arrays `keys` and `values` have the same length.","params":{"keys":"An array of `bytes32` keys under which the `bytes` values will be stored.","values":"An array of `bytes` values corresponding to the keys to be stored."}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"userdoc":{"kind":"user","methods":{"getBytes32Batch(bytes32[],bytes32[])":{"notice":"Retrieves an array of `bytes32` values corresponding to specified keys across multiple namespaces."},"getBytesBatch(bytes32[],bytes32[])":{"notice":"Retrieves an array of `bytes` values corresponding to an array of keys from specified namespaces."},"setBytes32Batch(bytes32[],bytes32[])":{"notice":"Sets an array of `bytes32` values for corresponding keys within the caller's (`msg.sender`) namespace."},"setBytesBatch(bytes32[],bytes[])":{"notice":"Sets multiple `bytes` values for an array of keys within the namespace of the caller (`msg.sender`)."}},"version":1}},"settings":{"remappings":["@chainlink/=node_modules/@chainlink/","@create3-deployer/=node_modules/@story-protocol/create3-deployer/","@eth-optimism/=node_modules/@eth-optimism/","@openzeppelin-foundry-upgrades/=lib/protocol-periphery-v1/lib/openzeppelin-foundry-upgrades/","@openzeppelin/=node_modules/@openzeppelin/","@protocol-periphery-v1/=lib/protocol-periphery-v1/","@scroll-tech/=node_modules/@scroll-tech/","@solady/=node_modules/solady/","@story-protocol/=node_modules/@story-protocol/","@storyprotocol/core/=node_modules/@story-protocol/protocol-core/contracts/","@storyprotocol/periphery/=node_modules/@story-protocol/protocol-periphery/contracts/","@storyprotocol/script/=node_modules/@story-protocol/protocol-core/script/foundry/","@storyprotocol/test/=node_modules/@story-protocol/protocol-core/test/foundry/","@uniswap/=node_modules/@uniswap/","base64-sol/=node_modules/base64-sol/","ds-test/=node_modules/ds-test/src/","erc6551/=node_modules/erc6551/","forge-std/=node_modules/forge-std/src/","hardhat-deploy/=node_modules/hardhat-deploy/","hardhat-diamond-abi/=node_modules/hardhat-diamond-abi/","hardhat/=node_modules/hardhat/","openzeppelin-foundry-upgrades/=lib/protocol-periphery-v1/lib/openzeppelin-foundry-upgrades/src/","protocol-periphery-v1/=lib/protocol-periphery-v1/","solady/=node_modules/solady/","solidity-code-metrics/=node_modules/solidity-code-metrics/","solidity-stringutils/=lib/protocol-periphery-v1/lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/","solmate/=node_modules/solmate/"],"optimizer":{"enabled":true,"runs":20000},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"node_modules/@story-protocol/protocol-core/contracts/interfaces/IIPAccountStorage.sol":"IIPAccountStorage"},"evmVersion":"cancun","libraries":{}},"sources":{"node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol":{"keccak256":"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa","urls":["bzz-raw://8084aa71a4cc7d2980972412a88fe4f114869faea3fefa5436431644eb5c0287","dweb:/ipfs/Qmbqfs5dRdPvHVKY8kTaeyc65NdqXRQwRK7h9s5UJEhD1p"],"license":"MIT"},"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol":{"keccak256":"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8","urls":["bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621","dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL"],"license":"MIT"},"node_modules/@story-protocol/protocol-core/contracts/interfaces/IIPAccountStorage.sol":{"keccak256":"0x660f3c2741daddb8afaa681816f637521acb02432dd71aa26b64380a3a2183f0","urls":["bzz-raw://fc0554d596b99ddb3124157db5bde166859238dfc1407c12602f7ed59ce04d7a","dweb:/ipfs/QmPFCSfGvD2dRA72qfpYYV8xyPwwNteSuijSJv5tVFHuFe"],"license":"UNLICENSED"}},"version":1},"id":83}