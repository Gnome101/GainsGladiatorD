{"abi":[{"type":"function","name":"beforeMintLicenseTokens","inputs":[{"name":"caller","type":"address","internalType":"address"},{"name":"licensorIpId","type":"address","internalType":"address"},{"name":"licenseTemplate","type":"address","internalType":"address"},{"name":"licenseTermsId","type":"uint256","internalType":"uint256"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"receiver","type":"address","internalType":"address"},{"name":"hookData","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"totalMintingFee","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"beforeRegisterDerivative","inputs":[{"name":"caller","type":"address","internalType":"address"},{"name":"childIpId","type":"address","internalType":"address"},{"name":"parentIpId","type":"address","internalType":"address"},{"name":"licenseTemplate","type":"address","internalType":"address"},{"name":"licenseTermsId","type":"uint256","internalType":"uint256"},{"name":"hookData","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"mintingFee","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"calculateMintingFee","inputs":[{"name":"caller","type":"address","internalType":"address"},{"name":"licensorIpId","type":"address","internalType":"address"},{"name":"licenseTemplate","type":"address","internalType":"address"},{"name":"licenseTermsId","type":"uint256","internalType":"uint256"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"receiver","type":"address","internalType":"address"},{"name":"hookData","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"totalMintingFee","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"name","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"nonpayable"},{"type":"function","name":"supportsInterface","inputs":[{"name":"interfaceId","type":"bytes4","internalType":"bytes4"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"beforeMintLicenseTokens(address,address,address,uint256,uint256,address,bytes)":"454915ab","beforeRegisterDerivative(address,address,address,address,uint256,bytes)":"36e8bcb5","calculateMintingFee(address,address,address,uint256,uint256,address,bytes)":"2317dde4","name()":"06fdde03","supportsInterface(bytes4)":"01ffc9a7"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"licensorIpId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"licenseTemplate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"licenseTermsId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"name\":\"beforeMintLicenseTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalMintingFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"childIpId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"parentIpId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"licenseTemplate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"licenseTermsId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"name\":\"beforeRegisterDerivative\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"mintingFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"licensorIpId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"licenseTemplate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"licenseTermsId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"name\":\"calculateMintingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalMintingFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Developers can create a contract that implements this interface to implement various checks and determine the minting price. Initially, the hooks must be registered as modules in the ModuleRegistry.\",\"kind\":\"dev\",\"methods\":{\"beforeMintLicenseTokens(address,address,address,uint256,uint256,address,bytes)\":{\"details\":\"The hook can be used to implement various checks and determine the minting price. The hook should revert if the minting is not allowed.\",\"params\":{\"amount\":\"The amount of license tokens to mint.\",\"caller\":\"The address of the caller who calling the mintLicenseTokens() function.\",\"hookData\":\"The data to be used by the licensing hook.\",\"licenseTemplate\":\"The address of the license template.\",\"licenseTermsId\":\"The ID of the license terms within the license template, which is used to mint license tokens.\",\"licensorIpId\":\"The ID of licensor IP from which issue the license tokens.\",\"receiver\":\"The address of the receiver who receive the license tokens.\"},\"returns\":{\"totalMintingFee\":\"The total minting fee to be paid when minting amount of license tokens.\"}},\"beforeRegisterDerivative(address,address,address,address,uint256,bytes)\":{\"details\":\"The hook can be used to implement various checks and determine the minting price. The hook should revert if the registering of derivative is not allowed.\",\"params\":{\"childIpId\":\"The derivative IP ID.\",\"hookData\":\"The data to be used by the licensing hook.\",\"licenseTemplate\":\"The address of the license template.\",\"licenseTermsId\":\"The ID of the license terms within the license template.\",\"parentIpId\":\"The parent IP ID.\"},\"returns\":{\"mintingFee\":\"The minting fee to be paid when register child IP to the parent IP as derivative.\"}},\"calculateMintingFee(address,address,address,uint256,uint256,address,bytes)\":{\"details\":\"The hook should guarantee the minting fee calculation is correct and return the minting fee which is the exact same amount with returned by beforeMintLicenseTokens(). The hook should revert if the minting fee calculation is not allowed.\",\"params\":{\"amount\":\"The amount of license tokens to mint.\",\"caller\":\"The address of the caller who calling the mintLicenseTokens() function.\",\"hookData\":\"The data to be used by the licensing hook.\",\"licenseTemplate\":\"The address of the license template.\",\"licenseTermsId\":\"The ID of the license terms within the license template, which is used to mint license tokens.\",\"licensorIpId\":\"The ID of licensor IP from which issue the license tokens.\",\"receiver\":\"The address of the receiver who receive the license tokens.\"},\"returns\":{\"totalMintingFee\":\"The total minting fee to be paid when minting amount of license tokens.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"title\":\"ILicensingHook\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"beforeMintLicenseTokens(address,address,address,uint256,uint256,address,bytes)\":{\"notice\":\"This function is called when the LicensingModule mints license tokens.\"},\"beforeRegisterDerivative(address,address,address,address,uint256,bytes)\":{\"notice\":\"This function is called before finalizing LicensingModule.registerDerivative(), after calling LicenseRegistry.registerDerivative().\"},\"calculateMintingFee(address,address,address,uint256,uint256,address,bytes)\":{\"notice\":\"This function is called when the LicensingModule calculates/predict the minting fee for license tokens.\"},\"name()\":{\"notice\":\"Returns the string identifier associated with the module.\"}},\"notice\":\"This interface defines the hook functions that are called by the LicensingModule when executing licensing functions. IP owners can configure the hook to a specific license terms or all licenses of an IP Asset.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@story-protocol/protocol-core/contracts/interfaces/modules/licensing/ILicensingHook.sol\":\"ILicensingHook\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[\":@chainlink/=node_modules/@chainlink/\",\":@create3-deployer/=node_modules/@story-protocol/create3-deployer/\",\":@eth-optimism/=node_modules/@eth-optimism/\",\":@openzeppelin-foundry-upgrades/=lib/protocol-periphery-v1/lib/openzeppelin-foundry-upgrades/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":@protocol-periphery-v1/=lib/protocol-periphery-v1/\",\":@scroll-tech/=node_modules/@scroll-tech/\",\":@solady/=node_modules/solady/\",\":@story-protocol/=node_modules/@story-protocol/\",\":@storyprotocol/core/=node_modules/@story-protocol/protocol-core/contracts/\",\":@storyprotocol/periphery/=node_modules/@story-protocol/protocol-periphery/contracts/\",\":@storyprotocol/script/=node_modules/@story-protocol/protocol-core/script/foundry/\",\":@storyprotocol/test/=node_modules/@story-protocol/protocol-core/test/foundry/\",\":@uniswap/=node_modules/@uniswap/\",\":base64-sol/=node_modules/base64-sol/\",\":ds-test/=node_modules/ds-test/src/\",\":erc6551/=node_modules/erc6551/\",\":forge-std/=node_modules/forge-std/src/\",\":hardhat-deploy/=node_modules/hardhat-deploy/\",\":hardhat-diamond-abi/=node_modules/hardhat-diamond-abi/\",\":hardhat/=node_modules/hardhat/\",\":openzeppelin-foundry-upgrades/=lib/protocol-periphery-v1/lib/openzeppelin-foundry-upgrades/src/\",\":protocol-periphery-v1/=lib/protocol-periphery-v1/\",\":solady/=node_modules/solady/\",\":solidity-code-metrics/=node_modules/solidity-code-metrics/\",\":solidity-stringutils/=lib/protocol-periphery-v1/lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/\",\":solmate/=node_modules/solmate/\"]},\"sources\":{\"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]},\"node_modules/@story-protocol/protocol-core/contracts/interfaces/modules/base/IModule.sol\":{\"keccak256\":\"0xe6b5a6812eeaf90aab7c016aaa8d3efdccedc95059badc40cca5eb23f0f16c50\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://ddb19461c0a36090307660badc772eaf6d3cfbad44d82b6bd47d810aaaf4c12c\",\"dweb:/ipfs/QmeTeb8xya718vYAQA8Cb5zRRMzGuLbT5HVP95sv34bMkE\"]},\"node_modules/@story-protocol/protocol-core/contracts/interfaces/modules/licensing/ILicensingHook.sol\":{\"keccak256\":\"0xb00d23bdbd4db3daf7866ede001ac905e71552af8de41021bd4211b67e928245\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://c568a955936717ccdf0750633d7886443c6cdf7df821ba983824ec9153d3ba17\",\"dweb:/ipfs/QmNoENHXXEqdMNpcbQe9MgC9VSoPcS8LWDTq9x5rkrXAiG\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.26+commit.8a97fa7a"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"address","name":"licensorIpId","type":"address"},{"internalType":"address","name":"licenseTemplate","type":"address"},{"internalType":"uint256","name":"licenseTermsId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"bytes","name":"hookData","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"beforeMintLicenseTokens","outputs":[{"internalType":"uint256","name":"totalMintingFee","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"address","name":"childIpId","type":"address"},{"internalType":"address","name":"parentIpId","type":"address"},{"internalType":"address","name":"licenseTemplate","type":"address"},{"internalType":"uint256","name":"licenseTermsId","type":"uint256"},{"internalType":"bytes","name":"hookData","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"beforeRegisterDerivative","outputs":[{"internalType":"uint256","name":"mintingFee","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"caller","type":"address"},{"internalType":"address","name":"licensorIpId","type":"address"},{"internalType":"address","name":"licenseTemplate","type":"address"},{"internalType":"uint256","name":"licenseTermsId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"bytes","name":"hookData","type":"bytes"}],"stateMutability":"view","type":"function","name":"calculateMintingFee","outputs":[{"internalType":"uint256","name":"totalMintingFee","type":"uint256"}]},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"name","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"stateMutability":"view","type":"function","name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}]}],"devdoc":{"kind":"dev","methods":{"beforeMintLicenseTokens(address,address,address,uint256,uint256,address,bytes)":{"details":"The hook can be used to implement various checks and determine the minting price. The hook should revert if the minting is not allowed.","params":{"amount":"The amount of license tokens to mint.","caller":"The address of the caller who calling the mintLicenseTokens() function.","hookData":"The data to be used by the licensing hook.","licenseTemplate":"The address of the license template.","licenseTermsId":"The ID of the license terms within the license template, which is used to mint license tokens.","licensorIpId":"The ID of licensor IP from which issue the license tokens.","receiver":"The address of the receiver who receive the license tokens."},"returns":{"totalMintingFee":"The total minting fee to be paid when minting amount of license tokens."}},"beforeRegisterDerivative(address,address,address,address,uint256,bytes)":{"details":"The hook can be used to implement various checks and determine the minting price. The hook should revert if the registering of derivative is not allowed.","params":{"childIpId":"The derivative IP ID.","hookData":"The data to be used by the licensing hook.","licenseTemplate":"The address of the license template.","licenseTermsId":"The ID of the license terms within the license template.","parentIpId":"The parent IP ID."},"returns":{"mintingFee":"The minting fee to be paid when register child IP to the parent IP as derivative."}},"calculateMintingFee(address,address,address,uint256,uint256,address,bytes)":{"details":"The hook should guarantee the minting fee calculation is correct and return the minting fee which is the exact same amount with returned by beforeMintLicenseTokens(). The hook should revert if the minting fee calculation is not allowed.","params":{"amount":"The amount of license tokens to mint.","caller":"The address of the caller who calling the mintLicenseTokens() function.","hookData":"The data to be used by the licensing hook.","licenseTemplate":"The address of the license template.","licenseTermsId":"The ID of the license terms within the license template, which is used to mint license tokens.","licensorIpId":"The ID of licensor IP from which issue the license tokens.","receiver":"The address of the receiver who receive the license tokens."},"returns":{"totalMintingFee":"The total minting fee to be paid when minting amount of license tokens."}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"userdoc":{"kind":"user","methods":{"beforeMintLicenseTokens(address,address,address,uint256,uint256,address,bytes)":{"notice":"This function is called when the LicensingModule mints license tokens."},"beforeRegisterDerivative(address,address,address,address,uint256,bytes)":{"notice":"This function is called before finalizing LicensingModule.registerDerivative(), after calling LicenseRegistry.registerDerivative()."},"calculateMintingFee(address,address,address,uint256,uint256,address,bytes)":{"notice":"This function is called when the LicensingModule calculates/predict the minting fee for license tokens."},"name()":{"notice":"Returns the string identifier associated with the module."}},"version":1}},"settings":{"remappings":["@chainlink/=node_modules/@chainlink/","@create3-deployer/=node_modules/@story-protocol/create3-deployer/","@eth-optimism/=node_modules/@eth-optimism/","@openzeppelin-foundry-upgrades/=lib/protocol-periphery-v1/lib/openzeppelin-foundry-upgrades/","@openzeppelin/=node_modules/@openzeppelin/","@protocol-periphery-v1/=lib/protocol-periphery-v1/","@scroll-tech/=node_modules/@scroll-tech/","@solady/=node_modules/solady/","@story-protocol/=node_modules/@story-protocol/","@storyprotocol/core/=node_modules/@story-protocol/protocol-core/contracts/","@storyprotocol/periphery/=node_modules/@story-protocol/protocol-periphery/contracts/","@storyprotocol/script/=node_modules/@story-protocol/protocol-core/script/foundry/","@storyprotocol/test/=node_modules/@story-protocol/protocol-core/test/foundry/","@uniswap/=node_modules/@uniswap/","base64-sol/=node_modules/base64-sol/","ds-test/=node_modules/ds-test/src/","erc6551/=node_modules/erc6551/","forge-std/=node_modules/forge-std/src/","hardhat-deploy/=node_modules/hardhat-deploy/","hardhat-diamond-abi/=node_modules/hardhat-diamond-abi/","hardhat/=node_modules/hardhat/","openzeppelin-foundry-upgrades/=lib/protocol-periphery-v1/lib/openzeppelin-foundry-upgrades/src/","protocol-periphery-v1/=lib/protocol-periphery-v1/","solady/=node_modules/solady/","solidity-code-metrics/=node_modules/solidity-code-metrics/","solidity-stringutils/=lib/protocol-periphery-v1/lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/","solmate/=node_modules/solmate/"],"optimizer":{"enabled":true,"runs":20000},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"node_modules/@story-protocol/protocol-core/contracts/interfaces/modules/licensing/ILicensingHook.sol":"ILicensingHook"},"evmVersion":"cancun","libraries":{}},"sources":{"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol":{"keccak256":"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8","urls":["bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621","dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL"],"license":"MIT"},"node_modules/@story-protocol/protocol-core/contracts/interfaces/modules/base/IModule.sol":{"keccak256":"0xe6b5a6812eeaf90aab7c016aaa8d3efdccedc95059badc40cca5eb23f0f16c50","urls":["bzz-raw://ddb19461c0a36090307660badc772eaf6d3cfbad44d82b6bd47d810aaaf4c12c","dweb:/ipfs/QmeTeb8xya718vYAQA8Cb5zRRMzGuLbT5HVP95sv34bMkE"],"license":"BUSL-1.1"},"node_modules/@story-protocol/protocol-core/contracts/interfaces/modules/licensing/ILicensingHook.sol":{"keccak256":"0xb00d23bdbd4db3daf7866ede001ac905e71552af8de41021bd4211b67e928245","urls":["bzz-raw://c568a955936717ccdf0750633d7886443c6cdf7df821ba983824ec9153d3ba17","dweb:/ipfs/QmNoENHXXEqdMNpcbQe9MgC9VSoPcS8LWDTq9x5rkrXAiG"],"license":"BUSL-1.1"}},"version":1},"id":91}