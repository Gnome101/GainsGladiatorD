{"abi":[{"type":"function","name":"attachLicenseTerms","inputs":[{"name":"ipId","type":"address","internalType":"address"},{"name":"licenseTemplate","type":"address","internalType":"address"},{"name":"licenseTermsId","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"mintLicenseTokens","inputs":[{"name":"licensorIpId","type":"address","internalType":"address"},{"name":"licenseTemplate","type":"address","internalType":"address"},{"name":"licenseTermsId","type":"uint256","internalType":"uint256"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"receiver","type":"address","internalType":"address"},{"name":"royaltyContext","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"startLicenseTokenId","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"name","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"nonpayable"},{"type":"function","name":"predictMintingLicenseFee","inputs":[{"name":"licensorIpId","type":"address","internalType":"address"},{"name":"licenseTemplate","type":"address","internalType":"address"},{"name":"licenseTermsId","type":"uint256","internalType":"uint256"},{"name":"amount","type":"uint256","internalType":"uint256"},{"name":"receiver","type":"address","internalType":"address"},{"name":"royaltyContext","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"currencyToken","type":"address","internalType":"address"},{"name":"tokenAmount","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"registerDerivative","inputs":[{"name":"childIpId","type":"address","internalType":"address"},{"name":"parentIpIds","type":"address[]","internalType":"address[]"},{"name":"licenseTermsIds","type":"uint256[]","internalType":"uint256[]"},{"name":"licenseTemplate","type":"address","internalType":"address"},{"name":"royaltyContext","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"registerDerivativeWithLicenseTokens","inputs":[{"name":"childIpId","type":"address","internalType":"address"},{"name":"licenseTokenIds","type":"uint256[]","internalType":"uint256[]"},{"name":"royaltyContext","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setLicensingConfig","inputs":[{"name":"ipId","type":"address","internalType":"address"},{"name":"licenseTemplate","type":"address","internalType":"address"},{"name":"licenseTermsId","type":"uint256","internalType":"uint256"},{"name":"licensingConfig","type":"tuple","internalType":"struct Licensing.LicensingConfig","components":[{"name":"isSet","type":"bool","internalType":"bool"},{"name":"mintingFee","type":"uint256","internalType":"uint256"},{"name":"licensingHook","type":"address","internalType":"address"},{"name":"hookData","type":"bytes","internalType":"bytes"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"supportsInterface","inputs":[{"name":"interfaceId","type":"bytes4","internalType":"bytes4"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"event","name":"DerivativeRegistered","inputs":[{"name":"caller","type":"address","indexed":true,"internalType":"address"},{"name":"childIpId","type":"address","indexed":true,"internalType":"address"},{"name":"licenseTokenIds","type":"uint256[]","indexed":false,"internalType":"uint256[]"},{"name":"parentIpIds","type":"address[]","indexed":false,"internalType":"address[]"},{"name":"licenseTermsIds","type":"uint256[]","indexed":false,"internalType":"uint256[]"},{"name":"licenseTemplate","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"LicenseTermsAttached","inputs":[{"name":"caller","type":"address","indexed":true,"internalType":"address"},{"name":"ipId","type":"address","indexed":true,"internalType":"address"},{"name":"licenseTemplate","type":"address","indexed":false,"internalType":"address"},{"name":"licenseTermsId","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"LicenseTokensMinted","inputs":[{"name":"caller","type":"address","indexed":true,"internalType":"address"},{"name":"licensorIpId","type":"address","indexed":true,"internalType":"address"},{"name":"licenseTemplate","type":"address","indexed":false,"internalType":"address"},{"name":"licenseTermsId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"receiver","type":"address","indexed":false,"internalType":"address"},{"name":"startLicenseTokenId","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"attachLicenseTerms(address,address,uint256)":"2a4130c0","mintLicenseTokens(address,address,uint256,uint256,address,bytes)":"0672a3bf","name()":"06fdde03","predictMintingLicenseFee(address,address,uint256,uint256,address,bytes)":"c918f3f2","registerDerivative(address,address[],uint256[],address,bytes)":"71f6bea7","registerDerivativeWithLicenseTokens(address,uint256[],bytes)":"12af7ef6","setLicensingConfig(address,address,uint256,(bool,uint256,address,bytes))":"55b602d7","supportsInterface(bytes4)":"01ffc9a7"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"childIpId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"licenseTokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"parentIpIds\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"licenseTermsIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"licenseTemplate\",\"type\":\"address\"}],\"name\":\"DerivativeRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ipId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"licenseTemplate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"licenseTermsId\",\"type\":\"uint256\"}],\"name\":\"LicenseTermsAttached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"licensorIpId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"licenseTemplate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"licenseTermsId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startLicenseTokenId\",\"type\":\"uint256\"}],\"name\":\"LicenseTokensMinted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ipId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"licenseTemplate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"licenseTermsId\",\"type\":\"uint256\"}],\"name\":\"attachLicenseTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"licensorIpId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"licenseTemplate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"licenseTermsId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"royaltyContext\",\"type\":\"bytes\"}],\"name\":\"mintLicenseTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startLicenseTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"licensorIpId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"licenseTemplate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"licenseTermsId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"royaltyContext\",\"type\":\"bytes\"}],\"name\":\"predictMintingLicenseFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"currencyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"childIpId\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"parentIpIds\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"licenseTermsIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"licenseTemplate\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"royaltyContext\",\"type\":\"bytes\"}],\"name\":\"registerDerivative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"childIpId\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"licenseTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"royaltyContext\",\"type\":\"bytes\"}],\"name\":\"registerDerivativeWithLicenseTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ipId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"licenseTemplate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"licenseTermsId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"mintingFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"licensingHook\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"internalType\":\"struct Licensing.LicensingConfig\",\"name\":\"licensingConfig\",\"type\":\"tuple\"}],\"name\":\"setLicensingConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"DerivativeRegistered(address,address,uint256[],address[],uint256[],address)\":{\"params\":{\"caller\":\"The address of the caller.\",\"childIpId\":\"The derivative IP ID.\",\"licenseTemplate\":\"The address of the license template.\",\"licenseTermsIds\":\"The IDs of the license terms.\",\"licenseTokenIds\":\"The IDs of the license tokens.\",\"parentIpIds\":\"The parent IP IDs.\"}},\"LicenseTermsAttached(address,address,address,uint256)\":{\"params\":{\"caller\":\"The address of the caller.\",\"ipId\":\"The IP ID.\",\"licenseTemplate\":\"The address of the license template.\",\"licenseTermsId\":\"The ID of the license terms in the license template.\"}},\"LicenseTokensMinted(address,address,address,uint256,uint256,address,uint256)\":{\"params\":{\"amount\":\"The amount of license tokens minted.\",\"caller\":\"The address of the caller.\",\"licenseTemplate\":\"The address of the license template.\",\"licenseTermsId\":\"The ID of the license terms.\",\"licensorIpId\":\"The parent IP ID.\",\"receiver\":\"The address of the receiver.\",\"startLicenseTokenId\":\"The start ID of the minted license tokens.\"}}},\"kind\":\"dev\",\"methods\":{\"attachLicenseTerms(address,address,uint256)\":{\"params\":{\"ipId\":\"The IP ID.\",\"licenseTemplate\":\"The address of the license template.\",\"licenseTermsId\":\"The ID of the license terms.\"}},\"mintLicenseTokens(address,address,uint256,uint256,address,bytes)\":{\"params\":{\"amount\":\"The amount of license tokens to mint.\",\"licenseTemplate\":\"The address of the license template.\",\"licenseTermsId\":\"The ID of the license terms within the license template.\",\"licensorIpId\":\"The licensor IP ID.\",\"receiver\":\"The address of the receiver.\",\"royaltyContext\":\"The context of the royalty.\"},\"returns\":{\"startLicenseTokenId\":\"The start ID of the minted license tokens.\"}},\"predictMintingLicenseFee(address,address,uint256,uint256,address,bytes)\":{\"params\":{\"amount\":\"The amount of license tokens to mint.\",\"licenseTemplate\":\"The address of the license template.\",\"licenseTermsId\":\"The ID of the license terms.\",\"licensorIpId\":\"The IP ID of the licensor.\",\"receiver\":\"The address of the receiver.\",\"royaltyContext\":\"The context of the royalty.\"},\"returns\":{\"currencyToken\":\"The address of the ERC20 token used for minting license fee.\",\"tokenAmount\":\"The amount of the currency token to be paid for minting license tokens.\"}},\"registerDerivative(address,address[],uint256[],address,bytes)\":{\"params\":{\"childIpId\":\"The derivative IP ID.\",\"licenseTemplate\":\"The address of the license template of the license terms Ids.\",\"licenseTermsIds\":\"The IDs of the license terms that the parent IP supports.\",\"parentIpIds\":\"The parent IP IDs.\",\"royaltyContext\":\"The context of the royalty.\"}},\"registerDerivativeWithLicenseTokens(address,uint256[],bytes)\":{\"params\":{\"childIpId\":\"The derivative IP ID.\",\"licenseTokenIds\":\"The IDs of the license tokens.\",\"royaltyContext\":\"The context of the royalty.\"}},\"setLicensingConfig(address,address,uint256,(bool,uint256,address,bytes))\":{\"params\":{\"ipId\":\"The address of the IP for which the configuration is being set.\",\"licenseTemplate\":\"The address of the license template used. If not specified, the configuration applies to all licenses.\",\"licenseTermsId\":\"The ID of the license terms within the license template. If not specified, the configuration applies to all licenses.\",\"licensingConfig\":\"The licensing configuration for the license.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"title\":\"ILicensingModule\",\"version\":1},\"userdoc\":{\"events\":{\"DerivativeRegistered(address,address,uint256[],address[],uint256[],address)\":{\"notice\":\"Emitted when a derivative IP is registered.\"},\"LicenseTermsAttached(address,address,address,uint256)\":{\"notice\":\"Emitted when new license terms are attached to an IP.\"},\"LicenseTokensMinted(address,address,address,uint256,uint256,address,uint256)\":{\"notice\":\"Emitted when license tokens are minted.\"}},\"kind\":\"user\",\"methods\":{\"attachLicenseTerms(address,address,uint256)\":{\"notice\":\"Attaches license terms to an IP. the function must be called by the IP owner or an authorized operator.\"},\"mintLicenseTokens(address,address,uint256,uint256,address,bytes)\":{\"notice\":\"Mints license tokens for the license terms attached to an IP. The license tokens are minted to the receiver. The license terms must be attached to the IP before calling this function. But it can mint license token of default license terms without attaching the default license terms, since it is attached to all IPs by default. IP owners can mint license tokens for their IPs for arbitrary license terms without attaching the license terms to IP. It might require the caller pay the minting fee, depending on the license terms or configured by the iP owner. The minting fee is paid in the minting fee token specified in the license terms or configured by the IP owner. IP owners can configure the minting fee of their IPs or configure the minting fee module to determine the minting fee. IP owners can configure the receiver check module to determine the receiver of the minted license tokens.\"},\"name()\":{\"notice\":\"Returns the string identifier associated with the module.\"},\"predictMintingLicenseFee(address,address,uint256,uint256,address,bytes)\":{\"notice\":\"pre-compute the minting license fee for the given IP and license terms. the function can be used to calculate the minting license fee before minting license tokens.\"},\"registerDerivative(address,address[],uint256[],address,bytes)\":{\"notice\":\"Registers a derivative directly with parent IP's license terms, without needing license tokens, and attaches the license terms of the parent IPs to the derivative IP. The license terms must be attached to the parent IP before calling this function. All IPs attached default license terms by default. The derivative IP owner must be the caller or an authorized operator.\"},\"registerDerivativeWithLicenseTokens(address,uint256[],bytes)\":{\"notice\":\"Registers a derivative with license tokens. the derivative IP is registered with license tokens minted from the parent IP's license terms. the license terms of the parent IPs issued with license tokens are attached to the derivative IP. the caller must be the derivative IP owner or an authorized operator.\"},\"setLicensingConfig(address,address,uint256,(bool,uint256,address,bytes))\":{\"notice\":\"Sets the licensing configuration for a specific license terms of an IP. If both licenseTemplate and licenseTermsId are not specified then the licensing config apply to all licenses of given IP.\"}},\"notice\":\"This interface defines the entry point for users to manage licenses in the Story Protocol. It defines the workflow of license actions and coordinates among all license components and dependent components, like RoyaltyModule. The Licensing Module is responsible for attaching license terms to an IP, minting license tokens, and registering derivatives.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@story-protocol/protocol-core/contracts/interfaces/modules/licensing/ILicensingModule.sol\":\"ILicensingModule\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[\":@chainlink/=node_modules/@chainlink/\",\":@create3-deployer/=node_modules/@story-protocol/create3-deployer/\",\":@eth-optimism/=node_modules/@eth-optimism/\",\":@openzeppelin-foundry-upgrades/=lib/protocol-periphery-v1/lib/openzeppelin-foundry-upgrades/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":@protocol-periphery-v1/=lib/protocol-periphery-v1/\",\":@scroll-tech/=node_modules/@scroll-tech/\",\":@solady/=node_modules/solady/\",\":@story-protocol/=node_modules/@story-protocol/\",\":@storyprotocol/core/=node_modules/@story-protocol/protocol-core/contracts/\",\":@storyprotocol/periphery/=node_modules/@story-protocol/protocol-periphery/contracts/\",\":@storyprotocol/script/=node_modules/@story-protocol/protocol-core/script/foundry/\",\":@storyprotocol/test/=node_modules/@story-protocol/protocol-core/test/foundry/\",\":@uniswap/=node_modules/@uniswap/\",\":base64-sol/=node_modules/base64-sol/\",\":ds-test/=node_modules/ds-test/src/\",\":erc6551/=node_modules/erc6551/\",\":forge-std/=node_modules/forge-std/src/\",\":hardhat-deploy/=node_modules/hardhat-deploy/\",\":hardhat-diamond-abi/=node_modules/hardhat-diamond-abi/\",\":hardhat/=node_modules/hardhat/\",\":openzeppelin-foundry-upgrades/=lib/protocol-periphery-v1/lib/openzeppelin-foundry-upgrades/src/\",\":protocol-periphery-v1/=lib/protocol-periphery-v1/\",\":solady/=node_modules/solady/\",\":solidity-code-metrics/=node_modules/solidity-code-metrics/\",\":solidity-stringutils/=lib/protocol-periphery-v1/lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/\",\":solmate/=node_modules/solmate/\"]},\"sources\":{\"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]},\"node_modules/@story-protocol/protocol-core/contracts/interfaces/modules/base/IModule.sol\":{\"keccak256\":\"0xe6b5a6812eeaf90aab7c016aaa8d3efdccedc95059badc40cca5eb23f0f16c50\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://ddb19461c0a36090307660badc772eaf6d3cfbad44d82b6bd47d810aaaf4c12c\",\"dweb:/ipfs/QmeTeb8xya718vYAQA8Cb5zRRMzGuLbT5HVP95sv34bMkE\"]},\"node_modules/@story-protocol/protocol-core/contracts/interfaces/modules/licensing/ILicensingModule.sol\":{\"keccak256\":\"0x0958d6fad29f652076ea6617c30c9c1ad3ad349a1c00f62d9bef81ac5b407f0e\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://df7578c972141e50415a95b9e23dfc8d3dee8f7ad5188a2f0ba867ac3cc0e8ae\",\"dweb:/ipfs/QmX9XCjq3iNCnp5RL9A4MJnsLq1c1erqHSFwiq7E9ztzAi\"]},\"node_modules/@story-protocol/protocol-core/contracts/lib/Licensing.sol\":{\"keccak256\":\"0x4c8a0a4a9a1cc9bc0525ae7ef2e36c4e47629ce4c8df83dcc3caf3268b387b8b\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://22950b7161c7f7b24c1f9ab0e92b7752e4103dbec5e7b18aee58bcd4314c5fcc\",\"dweb:/ipfs/QmXqw5zwwhW6SaSCodS3jaiAbEvKeBWsivcPmMrH5TxL9n\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.26+commit.8a97fa7a"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"caller","type":"address","indexed":true},{"internalType":"address","name":"childIpId","type":"address","indexed":true},{"internalType":"uint256[]","name":"licenseTokenIds","type":"uint256[]","indexed":false},{"internalType":"address[]","name":"parentIpIds","type":"address[]","indexed":false},{"internalType":"uint256[]","name":"licenseTermsIds","type":"uint256[]","indexed":false},{"internalType":"address","name":"licenseTemplate","type":"address","indexed":false}],"type":"event","name":"DerivativeRegistered","anonymous":false},{"inputs":[{"internalType":"address","name":"caller","type":"address","indexed":true},{"internalType":"address","name":"ipId","type":"address","indexed":true},{"internalType":"address","name":"licenseTemplate","type":"address","indexed":false},{"internalType":"uint256","name":"licenseTermsId","type":"uint256","indexed":false}],"type":"event","name":"LicenseTermsAttached","anonymous":false},{"inputs":[{"internalType":"address","name":"caller","type":"address","indexed":true},{"internalType":"address","name":"licensorIpId","type":"address","indexed":true},{"internalType":"address","name":"licenseTemplate","type":"address","indexed":false},{"internalType":"uint256","name":"licenseTermsId","type":"uint256","indexed":true},{"internalType":"uint256","name":"amount","type":"uint256","indexed":false},{"internalType":"address","name":"receiver","type":"address","indexed":false},{"internalType":"uint256","name":"startLicenseTokenId","type":"uint256","indexed":false}],"type":"event","name":"LicenseTokensMinted","anonymous":false},{"inputs":[{"internalType":"address","name":"ipId","type":"address"},{"internalType":"address","name":"licenseTemplate","type":"address"},{"internalType":"uint256","name":"licenseTermsId","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"attachLicenseTerms"},{"inputs":[{"internalType":"address","name":"licensorIpId","type":"address"},{"internalType":"address","name":"licenseTemplate","type":"address"},{"internalType":"uint256","name":"licenseTermsId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"bytes","name":"royaltyContext","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"mintLicenseTokens","outputs":[{"internalType":"uint256","name":"startLicenseTokenId","type":"uint256"}]},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"name","outputs":[{"internalType":"string","name":"","type":"string"}]},{"inputs":[{"internalType":"address","name":"licensorIpId","type":"address"},{"internalType":"address","name":"licenseTemplate","type":"address"},{"internalType":"uint256","name":"licenseTermsId","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"receiver","type":"address"},{"internalType":"bytes","name":"royaltyContext","type":"bytes"}],"stateMutability":"view","type":"function","name":"predictMintingLicenseFee","outputs":[{"internalType":"address","name":"currencyToken","type":"address"},{"internalType":"uint256","name":"tokenAmount","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"childIpId","type":"address"},{"internalType":"address[]","name":"parentIpIds","type":"address[]"},{"internalType":"uint256[]","name":"licenseTermsIds","type":"uint256[]"},{"internalType":"address","name":"licenseTemplate","type":"address"},{"internalType":"bytes","name":"royaltyContext","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"registerDerivative"},{"inputs":[{"internalType":"address","name":"childIpId","type":"address"},{"internalType":"uint256[]","name":"licenseTokenIds","type":"uint256[]"},{"internalType":"bytes","name":"royaltyContext","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"registerDerivativeWithLicenseTokens"},{"inputs":[{"internalType":"address","name":"ipId","type":"address"},{"internalType":"address","name":"licenseTemplate","type":"address"},{"internalType":"uint256","name":"licenseTermsId","type":"uint256"},{"internalType":"struct Licensing.LicensingConfig","name":"licensingConfig","type":"tuple","components":[{"internalType":"bool","name":"isSet","type":"bool"},{"internalType":"uint256","name":"mintingFee","type":"uint256"},{"internalType":"address","name":"licensingHook","type":"address"},{"internalType":"bytes","name":"hookData","type":"bytes"}]}],"stateMutability":"nonpayable","type":"function","name":"setLicensingConfig"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"stateMutability":"view","type":"function","name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}]}],"devdoc":{"kind":"dev","methods":{"attachLicenseTerms(address,address,uint256)":{"params":{"ipId":"The IP ID.","licenseTemplate":"The address of the license template.","licenseTermsId":"The ID of the license terms."}},"mintLicenseTokens(address,address,uint256,uint256,address,bytes)":{"params":{"amount":"The amount of license tokens to mint.","licenseTemplate":"The address of the license template.","licenseTermsId":"The ID of the license terms within the license template.","licensorIpId":"The licensor IP ID.","receiver":"The address of the receiver.","royaltyContext":"The context of the royalty."},"returns":{"startLicenseTokenId":"The start ID of the minted license tokens."}},"predictMintingLicenseFee(address,address,uint256,uint256,address,bytes)":{"params":{"amount":"The amount of license tokens to mint.","licenseTemplate":"The address of the license template.","licenseTermsId":"The ID of the license terms.","licensorIpId":"The IP ID of the licensor.","receiver":"The address of the receiver.","royaltyContext":"The context of the royalty."},"returns":{"currencyToken":"The address of the ERC20 token used for minting license fee.","tokenAmount":"The amount of the currency token to be paid for minting license tokens."}},"registerDerivative(address,address[],uint256[],address,bytes)":{"params":{"childIpId":"The derivative IP ID.","licenseTemplate":"The address of the license template of the license terms Ids.","licenseTermsIds":"The IDs of the license terms that the parent IP supports.","parentIpIds":"The parent IP IDs.","royaltyContext":"The context of the royalty."}},"registerDerivativeWithLicenseTokens(address,uint256[],bytes)":{"params":{"childIpId":"The derivative IP ID.","licenseTokenIds":"The IDs of the license tokens.","royaltyContext":"The context of the royalty."}},"setLicensingConfig(address,address,uint256,(bool,uint256,address,bytes))":{"params":{"ipId":"The address of the IP for which the configuration is being set.","licenseTemplate":"The address of the license template used. If not specified, the configuration applies to all licenses.","licenseTermsId":"The ID of the license terms within the license template. If not specified, the configuration applies to all licenses.","licensingConfig":"The licensing configuration for the license."}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"userdoc":{"kind":"user","methods":{"attachLicenseTerms(address,address,uint256)":{"notice":"Attaches license terms to an IP. the function must be called by the IP owner or an authorized operator."},"mintLicenseTokens(address,address,uint256,uint256,address,bytes)":{"notice":"Mints license tokens for the license terms attached to an IP. The license tokens are minted to the receiver. The license terms must be attached to the IP before calling this function. But it can mint license token of default license terms without attaching the default license terms, since it is attached to all IPs by default. IP owners can mint license tokens for their IPs for arbitrary license terms without attaching the license terms to IP. It might require the caller pay the minting fee, depending on the license terms or configured by the iP owner. The minting fee is paid in the minting fee token specified in the license terms or configured by the IP owner. IP owners can configure the minting fee of their IPs or configure the minting fee module to determine the minting fee. IP owners can configure the receiver check module to determine the receiver of the minted license tokens."},"name()":{"notice":"Returns the string identifier associated with the module."},"predictMintingLicenseFee(address,address,uint256,uint256,address,bytes)":{"notice":"pre-compute the minting license fee for the given IP and license terms. the function can be used to calculate the minting license fee before minting license tokens."},"registerDerivative(address,address[],uint256[],address,bytes)":{"notice":"Registers a derivative directly with parent IP's license terms, without needing license tokens, and attaches the license terms of the parent IPs to the derivative IP. The license terms must be attached to the parent IP before calling this function. All IPs attached default license terms by default. The derivative IP owner must be the caller or an authorized operator."},"registerDerivativeWithLicenseTokens(address,uint256[],bytes)":{"notice":"Registers a derivative with license tokens. the derivative IP is registered with license tokens minted from the parent IP's license terms. the license terms of the parent IPs issued with license tokens are attached to the derivative IP. the caller must be the derivative IP owner or an authorized operator."},"setLicensingConfig(address,address,uint256,(bool,uint256,address,bytes))":{"notice":"Sets the licensing configuration for a specific license terms of an IP. If both licenseTemplate and licenseTermsId are not specified then the licensing config apply to all licenses of given IP."}},"version":1}},"settings":{"remappings":["@chainlink/=node_modules/@chainlink/","@create3-deployer/=node_modules/@story-protocol/create3-deployer/","@eth-optimism/=node_modules/@eth-optimism/","@openzeppelin-foundry-upgrades/=lib/protocol-periphery-v1/lib/openzeppelin-foundry-upgrades/","@openzeppelin/=node_modules/@openzeppelin/","@protocol-periphery-v1/=lib/protocol-periphery-v1/","@scroll-tech/=node_modules/@scroll-tech/","@solady/=node_modules/solady/","@story-protocol/=node_modules/@story-protocol/","@storyprotocol/core/=node_modules/@story-protocol/protocol-core/contracts/","@storyprotocol/periphery/=node_modules/@story-protocol/protocol-periphery/contracts/","@storyprotocol/script/=node_modules/@story-protocol/protocol-core/script/foundry/","@storyprotocol/test/=node_modules/@story-protocol/protocol-core/test/foundry/","@uniswap/=node_modules/@uniswap/","base64-sol/=node_modules/base64-sol/","ds-test/=node_modules/ds-test/src/","erc6551/=node_modules/erc6551/","forge-std/=node_modules/forge-std/src/","hardhat-deploy/=node_modules/hardhat-deploy/","hardhat-diamond-abi/=node_modules/hardhat-diamond-abi/","hardhat/=node_modules/hardhat/","openzeppelin-foundry-upgrades/=lib/protocol-periphery-v1/lib/openzeppelin-foundry-upgrades/src/","protocol-periphery-v1/=lib/protocol-periphery-v1/","solady/=node_modules/solady/","solidity-code-metrics/=node_modules/solidity-code-metrics/","solidity-stringutils/=lib/protocol-periphery-v1/lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/","solmate/=node_modules/solmate/"],"optimizer":{"enabled":true,"runs":20000},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"node_modules/@story-protocol/protocol-core/contracts/interfaces/modules/licensing/ILicensingModule.sol":"ILicensingModule"},"evmVersion":"cancun","libraries":{}},"sources":{"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol":{"keccak256":"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8","urls":["bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621","dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL"],"license":"MIT"},"node_modules/@story-protocol/protocol-core/contracts/interfaces/modules/base/IModule.sol":{"keccak256":"0xe6b5a6812eeaf90aab7c016aaa8d3efdccedc95059badc40cca5eb23f0f16c50","urls":["bzz-raw://ddb19461c0a36090307660badc772eaf6d3cfbad44d82b6bd47d810aaaf4c12c","dweb:/ipfs/QmeTeb8xya718vYAQA8Cb5zRRMzGuLbT5HVP95sv34bMkE"],"license":"BUSL-1.1"},"node_modules/@story-protocol/protocol-core/contracts/interfaces/modules/licensing/ILicensingModule.sol":{"keccak256":"0x0958d6fad29f652076ea6617c30c9c1ad3ad349a1c00f62d9bef81ac5b407f0e","urls":["bzz-raw://df7578c972141e50415a95b9e23dfc8d3dee8f7ad5188a2f0ba867ac3cc0e8ae","dweb:/ipfs/QmX9XCjq3iNCnp5RL9A4MJnsLq1c1erqHSFwiq7E9ztzAi"],"license":"BUSL-1.1"},"node_modules/@story-protocol/protocol-core/contracts/lib/Licensing.sol":{"keccak256":"0x4c8a0a4a9a1cc9bc0525ae7ef2e36c4e47629ce4c8df83dcc3caf3268b387b8b","urls":["bzz-raw://22950b7161c7f7b24c1f9ab0e92b7752e4103dbec5e7b18aee58bcd4314c5fcc","dweb:/ipfs/QmXqw5zwwhW6SaSCodS3jaiAbEvKeBWsivcPmMrH5TxL9n"],"license":"BUSL-1.1"}},"version":1},"id":92}